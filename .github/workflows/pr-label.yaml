name: pr label test
on:
  workflow_dispatch:
  pull_request:
    types:
      - labeled
      - unlabeled
      - closed
      - reopened
      - synchronize
env:
  RUNNER_DEBUG: 0
jobs:
  # label-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Show label
  #       id: check
  #       env:
  #         PR_LABEL: ${{ toJson(github.event.label) }}
  #         PR_ACTION: ${{ github.event.action }}
  #       run: bash scripts/pr-label-check.sh
  #     - name: Label check
  #       id: label-check
  #       env:
  #         PR_LABEL: ${{ toJson(github.event.label) }}
  #       run: |
  #         LABEL_NAME=$(echo "${PR_LABEL}" | jq -r .name | sed 's/ //g' | cut -f2 -d:)
  #         echo "label_name=${LABEL_NAME}"
  #         echo "label_name=${LABEL_NAME}" >>${GITHUB_ENV}
  #     - name: Label all
  #       id: set-matrix-all
  #       if: ${{ env.label_name == 'all' }}
  #       run: |
  #         echo "all: ${label_name}"
  #     - name: Label ${{ env.label_name }}
  #       id: set-matrix-specific
  #       if: ${{ env.label_name != 'all' }}
  #       run: |
  #         echo "NOT all: ${label_name}"
  #     - name: Show env
  #       run: |
  #         env | sort
  markets:
    runs-on: ubuntu-latest
    outputs:
      markets: ${{ steps.set-matrix.outputs.result }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: actions/checkout@v4
      - name: Label check
        id: label-check
        env:
          PR_LABEL: ${{ github.event.label.name }}
          PR_ACTION: ${{ github.event.action }}
          PR_LABELS: ${{ toJson(github.event.pull_request.labels) }}
        run: bash scripts/deployment-labels.sh
      - id: set-matrix
        uses: actions/github-script@v7
        # env:
        #   LABEL_LIST: ${{ env.label_list }}
        with:
          script: |
            const { LABEL_LIST } = process.env
            if ( LABEL_LIST === 'all' ) {
              return require('./markets.json')
            }
            return LABEL_LIST.split(',')

  deploy:
    if: ${{ fromJson(needs.markets.outputs.markets)[0] != null }}
    runs-on: ubuntu-latest
    needs:
      - markets
    strategy:
      fail-fast: false
      matrix:
        market: ${{ fromJson(needs.markets.outputs.markets) }}
    steps:
      - name: Deploy
        run: |
          echo "Matrix: ${{ matrix.market }}"
          echo "Markets: ${{ needs.markets.outputs.markets }}"
